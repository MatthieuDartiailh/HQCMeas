# -*- coding: utf-8 -*-
#==============================================================================
# module : stepper_task.py
# author : Lauriane Contamin
# license : MIT license
#==============================================================================
"""
"""
from enaml.widgets.api import (Label, ObjectCombo)
from enaml.stdlib.fields import FloatField, IntField

from inspect import cleandoc
from textwrap import fill

from hqc_meas.tasks.views.base_instr_view import BaseInstrumentView
from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.tasks.tools.string_evaluation import EVALUATER_TOOLTIP


enamldef SetSteppingParametersView(BaseInstrumentView): view:

    title << task.task_name
    constraints = [factory(auto_grid_layout),
                   driver_val.width == profile_val.width]

    Label: driver_lab:
        text = 'Driver'
    ObjectCombo: driver_val:
        items << sorted(task.driver_list)
        selected := task.selected_driver

    Label:  profile_lab:
        text = 'Instr'
    ObjectCombo: profile_val:
        items << sorted(profiles)
        selected := task.selected_profile

    Label: channel_lab:
        text = 'Channel'
    ObjectCombo: channel_val:
        hug_width = 'strong'
        items = list(task.get_members('channel').items)
        selected := task.channel
        
    Label: amp_lab:
        text = 'Amplitude (V)'
    QtLineCompleter: amp_val:
        hug_width = 'strong'
        text := task.amplitude
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP

    Label: freq_lab:
        text = 'Frequency (Hz)'
    QtLineCompleter: freq_val:
        hug_width = 'strong'
        text := task.frequency
        entries_updater << task.accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


enamldef SteppingView(BaseInstrumentView): view:

    title << task.task_name
    constraints = [factory(auto_grid_layout),
                   driver_val.width == profile_val.width]

    Label: driver_lab:
        text = 'Driver'
    ObjectCombo: driver_val:
        items << sorted(task.driver_list)
        selected := task.selected_driver

    Label:  profile_lab:
        text = 'Instr'
    ObjectCombo: profile_val:
        items << sorted(profiles)
        selected := task.selected_profile
        
    Label: channel_lab:
        text = 'Channel'
    ObjectCombo: channel_val:      
        items = range(1, 8)
        selected := task.channel

    Label: nstep_lab:
        text = 'Step number'
    IntField: nstep_val:
        value := task.steps
        tool_tip = fill(cleandoc('''Give a positive number of steps, or any
                                    negative integer to step continuously'''))

    Label: dir_lab:
        text = 'Direction'
    ObjectCombo: dir_val:      
        items = ['Up', 'Down']
        selected := task.channel

enamldef StopSteppingView(BaseInstrumentView): view:
    
    title << task.task_name
    constraints = [factory(auto_grid_layout),
                   driver_val.width == profile_val.width]

    Label: driver_lab:
        text = 'Driver'
    ObjectCombo: driver_val:
        items << sorted(task.driver_list)
        selected := task.selected_driver

    Label:  profile_lab:
        text = 'Instr'
    ObjectCombo: profile_val:
        items << sorted(profiles)
        selected := task.selected_profile    


TASK_VIEW_MAPPING = {'SetSteppingParametersTask' : SetSteppingParametersView,
                     'SteppingTask': SteppingView,
                     'StopSteppingTask': StopSteppingView}
