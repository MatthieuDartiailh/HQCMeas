from enaml.core.api import Conditional, Include
from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo, CheckBox)
from enaml.stdlib.fields import FloatField, IntField
from enaml.layout.api import factory

from inspect import cleandoc
from textwrap import fill

from hqc_meas.utils.widgets.qt_line_completer import QtLineCompleter
from hqc_meas.utils.layouts import auto_grid_layout
from hqc_meas.tasks.views.base_instr_view import BaseInstrumentView
from hqc_meas.tasks.tools.string_evaluation import EVALUATER_TOOLTIP


enamldef SetDcVoltageView(BaseInstrumentView): view:

    attr in_loop : bool = False
    title << task.task_name
    constraints = [factory(auto_grid_layout),
                   (step.width == step_val.width) | 'weak',
                   (step_val.width == safe_val.width),
                   (step_val.width == delay_val.width)]

    Label: sel_driv:
        text = 'Driver'
    ObjectCombo: sel_val:
        items << sorted(drivers)
        selected := task.selected_driver

    Label: sel_prof:
        text = 'Instr'
    ObjectCombo: prof_val:
        items << sorted(profiles)
        selected := task.selected_profile

    Conditional:
        condition = not in_loop
        Label:
            text = 'Voltage (V)'
        QtLineCompleter:
            hug_width = 'ignore'
            text := task.target_value
            entries_updater << task.accessible_database_entries
            tool_tip = EVALUATER_TOOLTIP

    Label: step:
        text = 'Back step (V)'
    FloatField: step_val:
        resist_width = 'ignore'
        value := task.back_step

    Label: safe:
        text = 'Safe max (V)'
    FloatField: safe_val:
        resist_width = 'ignore'
        value := task.safe_max

    Label: delay:
        text = 'Delay (s)'
    FloatField: delay_val:
        resist_width = 'ignore'
        value := task.delay

TASK_VIEW_MAPPING = {'SetDCVoltageTask' : SetDcVoltageView}


enamldef MultiChannelVoltageSourceILabel(Label):

    attr interface
    attr index = 4
    text = 'Channel'

enamldef MultiChannelVoltageSourceIChannel(IntField):

    attr interface
    value := interface.channel

enamldef DACSourceILabel(Label):

    attr interface
    attr index = 4
    text = 'DAC'

enamldef DACSourceIChannel(IntField):

    attr interface
    value := interface.channel
    hug_width = 'strong'
    minimum = 1
    maximum = 2

INTERFACE_VIEW_MAPPING = {'MultiChannelVoltageSourceInterface':
                          [MultiChannelVoltageSourceILabel,
                           MultiChannelVoltageSourceIChannel],
                          'DACInterface':
                          [DACSourceILabel,
                           DACSourceIChannel]}
